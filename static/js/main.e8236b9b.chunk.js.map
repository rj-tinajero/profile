{"version":3,"sources":["assets/profile_headshot.jpg","assets/icon-linkedin.svg","assets/icon-github.svg","assets/logo.svg","assets/background.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","headshot","style","fontFamily","href","target","rel","linkedin","github","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,uECA3CD,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,wC,kJC+E5BC,MAvEf,WACE,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OAEb,6BACE,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACf,wBAAIA,UAAU,IAAd,kBAAgC,oDAAhC,KACA,wBAAIA,UAAU,IAAd,SAAuB,wDAAvB,MAGF,yBAAKA,UAAU,WAAWC,IAAKC,MAE/B,6BACE,qCACA,gfAKA,kEACA,uBACEC,MAAO,CAACC,WAAY,aACpBJ,UAAU,WACVK,KAAK,gFACLC,OAAO,SACPC,IAAI,uBALN,wBAYF,wCACA,8BAIA,6BACA,yBAAKP,UAAU,OACb,yBAAKA,UAAU,iBACb,uCACA,qJAEA,2EAEA,uBAAGG,MAAO,CAACC,WAAY,aAAcJ,UAAU,WAAWK,KAAK,kCAA/D,4BAIF,yBAAKL,UAAU,gBACX,uBAAGK,KAAK,2CAA2CC,OAAO,UAAS,yBAAKL,IAAKO,OAC7E,uBAAGH,KAAK,iCAAiCC,OAAO,UAAS,yBAAKL,IAAKQ,eClDjEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8236b9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_headshot.79475a48.jpg\";","module.exports = __webpack_public_path__ + \"static/media/icon-linkedin.ed4316fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-github.1e7c6416.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.638299dc.jpg\";","import React from 'react';\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport headshot from './assets/profile_headshot.jpg'\nimport linkedin from './assets/icon-linkedin.svg'\nimport github from './assets/icon-github.svg'\nimport background from './assets/background.jpg'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        \n        <div >\n          <header className=\"App-header\">\n            <div className=\"myBOX\">\n              <div className=\"title\">\n              <h2 className=\"\">Hi, my name is <strong>Richard Tinajero</strong>.</h2>\n              <h2 className=\"\">I'm a <strong>Full Stack Developer</strong>.</h2>\n            </div>\n\n            <img className=\"headshot\" src={headshot} />\n            \n            <div>\n              <h5>ABOUT</h5>\n              <p>I reside in sunny Riverside, California. I am skilled in JavaScript and build projects using modern frameworks like React and Node. I have \n                4+ years of work experience in operational manufacturing and deployment. I recently took part in a web development\n                certification program run by Bloc. There, I built a number of projects and continue to build more to this very day! \n                My passions include mentoring college students, guitar, photography, and programming of course! \n              </p>\n              <p>This is a new paragragh right here.</p>\n              <a \n                style={{fontFamily: \"Noto Sans\"}}\n                className=\"link_out\"\n                href=\"https://github.com/rj-tinajero/profile/blob/master/RichardTinajero_Resume.pdf\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Check out my resume\n              </a>\n            </div>\n            \n\n            <h5>PROJECTS</h5>\n            <div>\n              \n            </div>\n\n            <br></br>\n            <div className=\"row\">\n              <div className=\"contact col-8\">\n                <h5>CONTACT</h5>\n                <p>Donec id elit non mi porta gravida at eget metus. \n                  Integer posuere erat a ante venenatis dapibus posuere velit aliquet.</p>\n                <p>If you'd like to connect, please email me at</p>\n                \n                <a style={{fontFamily: \"Noto Sans\"}} className=\"link_out\" href=\"mailto:rj.tinajero92@gmail.com\">rj.tinajero92@gmail.com</a>\n                \n                \n              </div>\n              <div className=\"social col-2\">\n                  <a href=\"https://linkedin.com/in/richard-tinajero\" target=\"_blank\"><img src={linkedin} /></a>\n                  <a href=\"https://github.com/rj-tinajero\" target=\"_blank\"><img src={github} /></a>\n              </div>\n            </div>\n            \n          </div>\n          \n          \n\n        </header>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n{/* <i class=\"fab fa-linkedin-in\"></i>\n<i class=\"fab fa-github\"></i> */}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n{/* <a href=\"https://github.com/rj-tinajero\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>\n<a href=\"https://linkedin.com/in/richard-tinajero\" target=\"_blank\"><i class=\"fab fa-linkedin-in\"></i></a> */}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}